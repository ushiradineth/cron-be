definitions:
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  user.AuthenticateResponse:
    properties:
      accessToken:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      refreshToken:
        type: string
    type: object
  user.RefreshTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  util.Error:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  util.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
info:
  contact:
    email: ushiradineth@gmail.com
    name: Ushira Dineth
    url: https://ushira.com
  description: Backend for Cron calendar management app.
  title: Cron
  version: "1.0"
paths:
  /user:
    delete:
      consumes:
      - application/json
      description: Delete authenticated User based on the JWT
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - User
    get:
      description: Get authenticated user based on the JWT sent with the request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create User with the parameters sent with the request
      parameters:
      - in: query
        name: email
        required: true
        type: string
      - in: query
        name: name
        required: true
        type: string
      - in: query
        maxLength: 20
        minLength: 8
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      summary: Create User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update authenticated User with the parameters sent with the request
        based on the JWT
      parameters:
      - in: query
        name: email
        required: true
        type: string
      - in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - User
  /user/auth:
    post:
      consumes:
      - application/json
      description: Authenticated User with the parameters sent with the request
      parameters:
      - in: query
        name: email
        required: true
        type: string
      - in: query
        minLength: 8
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.AuthenticateResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      summary: Authenticate User
      tags:
      - User
  /user/auth/password:
    put:
      consumes:
      - application/json
      description: Update authenticated User Password with the parameters sent with
        the request based on the JWT
      parameters:
      - in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      security:
      - BearerAuth: []
      summary: Update User Password
      tags:
      - User
  /user/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh Access Token User with the parameters sent with the request
        based on the request based on the JWT
      parameters:
      - in: query
        name: refresh_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.RefreshTokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.Error'
      security:
      - BearerAuth: []
      summary: Refresh Access Token
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
